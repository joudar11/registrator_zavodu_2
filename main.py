# --- Standardn√≠ knihovny ---
import os
import time
import random
import smtplib
from datetime import datetime, timedelta
from email.message import EmailMessage

# --- Extern√≠ knihovny ---
from playwright.sync_api import sync_playwright, TimeoutError

# --- Lok√°ln√≠ moduly ---
from data import (
    JMENO, CISLO_DOKLADU, CLENSKE_ID, DIVIZE, URL,
    LOGIN, HESLO, DATUM_CAS_REGISTRACE, SQUAD,
    GOOGLE_P, GOOGLE_U, MZ, ZACATECNIK, STAVITEL,
    ROZHODCI, POZNAMKA, PRITELKYNE, JMENO_PRITELKYNE
)

LIMIT = 50 # Po tomto poƒçtu ne√∫spƒõ≈°n√Ωch pokus≈Ø se program ukonƒç√≠
divider = "=" * 30
finished = None
datum_zavodu = None
nazev_zavodu = None

SQUAD = str(SQUAD)
REG_URL = "https://www.loslex.cz/contest/registration"
DIVIZE_local = DIVIZE # Bere si divizi do promƒõnn√©, se kterou je mo≈æn√© v r√°mci main d√°le pracovat a mƒõnit ji (pro ochranu proti neexistuj√≠c√≠  divizi)
POKUS_TIME = None # ƒåas zah√°jen√≠ pokusu o registraci (pro log)

SELECTOR_TLACITKO_PRIHLASIT = r"body > div.min-h-screen.bg-gray-100.dark\:bg-gray-900 > nav > div.max-w-7xl.mx-auto.px-4.md\:px-6.lg\:px-8 > div > div.hidden.space-x-1.items-center.md\:-my-px.md\:ml-10.md\:flex > button.inline-flex.items-center.px-1.border-b-2.border-transparent.text-sm.font-medium.leading-5.text-gray-500.dark\:text-gray-400.hover\:text-gray-700.dark\:hover\:text-gray-300.hover\:border-gray-300.dark\:hover\:border-gray-700.focus\:outline-none.focus\:text-gray-700.dark\:focus\:text-gray-300.focus\:border-gray-300.dark\:focus\:border-gray-700.transition.duration-150.ease-in-out"  # tlaƒç√≠tko pro zobrazen√≠ login formul√°≈ôe
SELECTOR_INPUT_LOGIN = r"#login"
SELECTOR_INPUT_HESLO = r"#password"
SELECTOR_TLACITKO_LOGIN = r"body > div.fixed.inset-0.overflow-y-auto.px-4.py-6.sm\:px-0.z-2000 > div.mb-6.bg-white.dark\:bg-gray-800.rounded-lg.overflow-hidden.shadow-xl.transform.transition-all.sm\:w-full.sm\:max-w-md.sm\:mx-auto > div > form > div.flex.items-center.justify-end.mt-4 > button"

SELECTOR_INPUT_JMENO = r"#username"
SELECTOR_INPUT_DOKLAD = r"#licenceid"
SELECTOR_CHECKBOX_CLEN = r"#lexmember"
SELECTOR_INPUT_CLENSKE_ID = r"#lexhash"
SELECTOR_SELECT_DIVIZE = r"#contest_division_id"
SELECTOR_SQUAD = f"#squad-{SQUAD}"
SELECTOR_CHECKBOX_GDPR = r"#gdpr"
SELECTOR_TLACITKO_REGISTRACE = r"#regform > div.flex.flex-col.items-center.justify-center > button"
SELECTOR_CHECKBOX_MZ = r'#notcomp[type="checkbox"]'
SELECTOR_INPUT_POZNAMKA = r"#note"
SELECTOR_CHECKBOX_ROZHODCI = r"#referee"
SELECTOR_CHECKBOX_STAVITEL = r"#builder"
SELECTOR_CHECKBOX_ZACATECNIK = r"#rookie"
SELECTOR_DATUM = r"body > div.min-h-screen.bg-gray-100.dark\:bg-gray-900 > main > div.py-4 > div > div > div > div:nth-child(1) > div.grid.grid-cols-auto.lg\:grid-cols-fitfirst.gap-x-2.lg\:gap-x-4.gap-y-2 > div:nth-child(10)"
SELECTOR_NAZEV = r"body > div.min-h-screen.bg-gray-100.dark\:bg-gray-900 > main > div.py-4 > div > div > div > div:nth-child(1) > div.justify-center.items-baseline.text-xl.font-bold.flex"

def get_summary():
    summary = f"""\n\n√ödaje pou≈æit√© p≈ôi registraci:\n
    Jm√©no: {JMENO}\n
    ƒå√≠slo ZP: {CISLO_DOKLADU}\n
    LEX ID: {CLENSKE_ID}\n
    Divize: {DIVIZE_local}\n
    Squad: {SQUAD}\n
    URL z√°vodu: {URL}\n
    Login: {LOGIN}\n
    Datum a ƒças registrace: {DATUM_CAS_REGISTRACE}\n
    Mimo z√°vod: {MZ}\n
    Rozhodƒç√≠: {ROZHODCI}\n
    Zaƒç√°teƒçn√≠k: {ZACATECNIK}\n
    Stavitel: {STAVITEL}\n
    Pozn√°mka: {POZNAMKA}
    """
    return summary

def print_and_log(action: str):
    print(action)
    try:
        os.makedirs("logs", exist_ok=True)
    except Exception as e:
        print(f"‚ùå Nelze vytvo≈ôit slo≈æku logs: {e}")
        return
    with open(f"logs/log-{POKUS_TIME}.txt", "a", encoding="utf-8") as f:
        f.write(f"[{datetime.now()}] {action}\n")

def prihlasit(page):
    try:
        page.click(SELECTOR_TLACITKO_PRIHLASIT)
    except Exception as e:
        print_and_log(f"‚ùå Nelze kliknout na tlaƒç√≠tko pro zobrazen√≠ p≈ôihl√°≈°en√≠: {e}")
        return False

    try:
        page.wait_for_selector(SELECTOR_INPUT_LOGIN)
        page.fill(SELECTOR_INPUT_LOGIN, LOGIN)
        page.fill(SELECTOR_INPUT_HESLO, HESLO)
    except Exception as e:
        print_and_log(f"‚ùå Nepoda≈ôilo se vyplnit p≈ôihla≈°ovac√≠ √∫daje: {e}")
        return False

    try:
        page.wait_for_selector(SELECTOR_TLACITKO_LOGIN, state="visible", timeout=10000)
        page.click(SELECTOR_TLACITKO_LOGIN)
    except TimeoutError:
        print_and_log("‚ùå Tlaƒç√≠tko P≈ôihl√°sit se nepoda≈ôilo kliknout ‚Äì timeout.")
        return False

def registrace():
    global DIVIZE_local
    print(divider)
    print(get_summary())
    print(divider)
    # Zah√°jen√≠ pr√°ce s prohl√≠≈æeƒçem
    with sync_playwright() as p:
        browser = p.chromium.launch(headless=False)
        page = browser.new_page()

        # Pokud je server LOSu down, operace sel≈æe, funkce se ukonƒç√≠ a jede se od zaƒç√°tku, dokud server nebude odpov√≠dat
        try:
            page.goto(URL, timeout=10000) 
        except Exception as e:
            print_and_log(f"‚ùå Nelze naƒç√≠st str√°nku z√°vodu. Server buƒè neodpov√≠d√°, nebo nejsi p≈ôipojen k internetu.\n\n{e}")
            return False

        # Pokud je ƒças zad√°n ‚Üí ƒçasovan√Ω re≈æim
        if DATUM_CAS_REGISTRACE is not None:
            try:
                cas_registrace = datetime.strptime(DATUM_CAS_REGISTRACE, "%Y-%m-%d %H:%M:%S")
            except ValueError:
                # Toto je jedin√° instance selh√°n√≠ programu, kter√° funkci nespust√≠ znovu. Opƒõtovn√© spu≈°tƒõn√≠ by nemƒõlo smysl, jeliko≈æ chyba je ve vadn√©m vstupu.
                print_and_log("‚ùå DATUM_CAS_REGISTRACE m√° ≈°patn√Ω form√°t. Pou≈æij RRRR-MM-DD HH:MM:SS. Ukonƒçuji program.")
                return True

            cas_prihlaseni = cas_registrace - timedelta(seconds=30)

            print_and_log(f"‚è≥ ƒåek√°m na ƒças p≈ôihl√°≈°en√≠: {cas_prihlaseni}")
            while datetime.now() < cas_prihlaseni:
                time.sleep(0.1)

            # P≈ôihl√°≈°en√≠
            print_and_log("üîê P≈ôihla≈°uji se...")
            prihlasit(page)

            cilovy_cas = cas_registrace + timedelta(seconds=0.5)
            print_and_log(f"‚è≥ ƒåek√°m na ƒças registrace: {cilovy_cas}")
            while datetime.now() < cilovy_cas:
                time.sleep(0.05)

            # Refresh po spu≈°tƒõn√≠ registrace
            print_and_log("üîÑ Refreshuji str√°nku...")
            try:
                page.goto(URL, wait_until="domcontentloaded", timeout=5000)
            except TimeoutError:
                print_and_log("‚ùå Timeout p≈ôi refreshi str√°nky ‚Äì pokraƒçuju d√°l.")
                return False
            try:
                page.wait_for_load_state("load", timeout=5000)
            except TimeoutError:
                print_and_log("‚ùå Str√°nku registrace se nepoda≈ôilo naƒç√≠st.")
                return False

        else:
            # Re≈æim bez ƒçasov√°n√≠ ‚Üí rovnou p≈ôihl√°≈°en√≠
            print_and_log("‚ö° P≈ôihla≈°uji se a rovnou registruji (bez ƒçasov√°n√≠)...")
            prihlasit(page)

        # Kontrola, ≈æe server odpov√≠d√° - 5s. Pokud ne, funkce sel≈æe a jede se od zaƒç√°tku.
        try:
            page.wait_for_selector(SELECTOR_TLACITKO_REGISTRACE, timeout=5000)
        except TimeoutError:
            print_and_log("‚ùå Str√°nka nenalezla tlaƒç√≠tko registrace.")
            return False
        

        # Spoleƒçn√° ƒç√°st registrace
        page.fill(SELECTOR_INPUT_DOKLAD, CISLO_DOKLADU)
        if CLENSKE_ID:
            page.check(SELECTOR_CHECKBOX_CLEN)
            page.fill(SELECTOR_INPUT_CLENSKE_ID, CLENSKE_ID)
        if POZNAMKA:
            page.fill(SELECTOR_INPUT_POZNAMKA, POZNAMKA)
        if ROZHODCI:
            page.check(SELECTOR_CHECKBOX_ROZHODCI)
        if ZACATECNIK:
            page.check(SELECTOR_CHECKBOX_ZACATECNIK)
        if MZ and not page.locator(SELECTOR_CHECKBOX_MZ).is_checked():
            page.check(SELECTOR_CHECKBOX_MZ)
        if STAVITEL:
            page.check(SELECTOR_CHECKBOX_STAVITEL)

        # O≈°et≈ôen√≠ neplatn√© divize. Pokud zvolen√° divize nen√≠ v z√°vodu, bude zvolena prvn√≠ mo≈æn√° divize. Z√°vodn√≠k si n√°slednƒõ registraci uprav√≠, ale nep≈ôijde o m√≠sto v z√°vodƒõ.
        try:
            page.select_option(SELECTOR_SELECT_DIVIZE, label=DIVIZE_local, timeout=500)
        except Exception:
            print_and_log(f"‚ö†Ô∏è Nepoda≈ôilo se vybrat divizi {DIVIZE} - vyb√≠r√°m prvn√≠ mo≈ænou divizi.")
            try:
                moznosti = page.locator(f"{SELECTOR_SELECT_DIVIZE} option")
                prvni_moznost = moznosti.nth(1).get_attribute("value")
                if prvni_moznost:
                    prvni_moznost_hodnota = moznosti.nth(1).text_content()
                    page.select_option(SELECTOR_SELECT_DIVIZE, value=prvni_moznost)
                    print_and_log(f"‚ö†Ô∏è Zvolena prvn√≠ dostupn√° divize: {prvni_moznost_hodnota}")
                    DIVIZE_local = prvni_moznost_hodnota
            except Exception as inner_e:
                print_and_log(f"‚ùå Nepoda≈ôilo se vybrat prvn√≠ mo≈ænou divizi: {inner_e}")
                return False
        
        try:
            page.click(SELECTOR_SQUAD)
        except Exception as e:
            print_and_log(f"‚ùå Nepoda≈ôilo se vybrat squad {SQUAD}: {e}")
            return False
        
        try:
            page.check(SELECTOR_CHECKBOX_GDPR)
        except Exception as e:
            print_and_log(f"‚ùå Nepoda≈ôilo se za≈°krtnout souhlas s GDPR: {e}")
            return False

        # Ulo≈æen√≠ √∫daj≈Ø ze z√°vodu do glob√°ln√≠ch promƒõnn√Ωch pro odesl√°n√≠ na mail.
        global datum_zavodu
        try:
            datum_zavodu = page.inner_text(SELECTOR_DATUM, timeout=5000)
        except Exception as e:
            print_and_log(f"‚ö†Ô∏è Nepoda≈ôilo se z√≠skat datum z√°vodu: {e}")
            datum_zavodu = "nezn√°m√© datum"
        global nazev_zavodu
        try:
            nazev_zavodu = page.inner_text(SELECTOR_NAZEV, timeout=5000)
        except Exception as e:
            print_and_log(f"‚ö†Ô∏è Nepoda≈ôilo se z√≠skat n√°zev z√°vodu: {e}")
            nazev_zavodu = "nezn√°m√Ω n√°zev"

        # ƒåek√°n√≠ a odesl√°n√≠ registrace v n√°hodn√©m intervalu + ulo≈æen√≠ ƒçasu kliknut√≠ do glob√°ln√≠ promƒõnn√©
        delay = random.uniform(2, 3)
        print_and_log(f"‚è≥ ƒåek√°m {delay:.2f} sekundy...")
        time.sleep(delay)
        try:
            page.wait_for_selector(SELECTOR_TLACITKO_REGISTRACE, timeout=5000)
            # page.click(SELECTOR_TLACITKO_REGISTRACE)
            page.goto("https://www.loslex.cz/contest/registration/10297")
        except Exception as e:
            print_and_log(f"‚ùå Nepoda≈ôilo se kliknout na tlaƒç√≠tko registrace: {e}")
            return False
        global finished
        finished = datetime.now()

        # Kontrola, ≈æe registrace probƒõhla (zobrazila se str√°nka registrace)
        max_wait = 8  # vte≈ôin
        start_time = time.time()
        while not page.url.startswith(REG_URL):
            if time.time() - start_time > max_wait:
                print_and_log(f"‚ùå Registrace pravdƒõpodobnƒõ selhala ‚Äì URL se nezmƒõnila do {max_wait} sekund.\nAktu√°ln√≠ URL: {page.url}")
                return False
            time.sleep(0.1)
        
        print_and_log(f"‚úÖ Registrace na z√°vod {nazev_zavodu} - {datum_zavodu} dokonƒçena.")

        # Po dokonƒçen√≠ registrace poƒçk√° specifikovan√Ω ƒças a n√°slednƒõ ukonƒçuje program.
        max_wait = 60  # sekund
        start_time = time.time()
        print_and_log(f"‚è≥ ƒåek√°m {max_wait} sekund pro kontrolu u≈æivatelem. N√°slednƒõ se ukonƒç√≠m.")
        informuj_pritelkyni()
        posli_email()
        while True:
            if time.time() - start_time > max_wait:
                return True
            time.sleep(1)

        return True # Toto vol√°n√≠ je prakticky zbyteƒçn√©, jde pouze o pojistku, kdyby selhala ƒçekac√≠ funkce v√Ω≈°e.
        
        # input("Stiskni ENTER pro zav≈ôen√≠ browseru a ukonƒçen√≠...")
        # return True
        # browser.close()  # nech otev≈ôen√© pro kontrolu

def posli_email():
    msg = EmailMessage()
    msg['Subject'] = '‚úÖ LOS Registrace probƒõhla'
    msg['From'] = GOOGLE_U
    msg['To'] = LOGIN
    msg.set_content(
    f"""Registrace na z√°vod probƒõhla √∫spƒõ≈°nƒõ.

Z√°vod: {nazev_zavodu}
Datum z√°vodu: {datum_zavodu}

ƒåas odesl√°n√≠ formul√°≈ôe: {finished}

{get_summary()
    .replace("\n\n", "\n")
    .replace("    ", "")
    .replace("registraci:", "registraci:\n")}"""
)

    # P≈ôihla≈°ovac√≠ √∫daje
    uzivatel = GOOGLE_U
    heslo = GOOGLE_P
    
    with open(f"logs/log-{POKUS_TIME}.txt", "rb") as f:
        msg.add_attachment(f.read(), maintype="text", subtype="plain", filename=f"Registraction LOG.txt")

    # Odesl√°n√≠ e-mailu
    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
        smtp.login(uzivatel, heslo)
        smtp.send_message(msg)
    print_and_log(f"‚úÖ Shrnut√≠ odesl√°no na {LOGIN}.")

def informuj_pritelkyni():
    msg = EmailMessage()
    msg['Subject'] = 'üî´ Tv≈Øj kluk pojede na z√°vod'
    msg['From'] = GOOGLE_U
    msg['To'] = PRITELKYNE
    msg.set_content(f"""Tv≈Øj kluk se sv√Ωm √∫≈æasn√Ωm Python skriptem pr√°vƒõ p≈ôihl√°sil na z√°vod {nazev_zavodu}, kter√Ω probƒõhne {datum_zavodu}.\n\nBude pot≈ôebovat dr≈æet palce.\n\nMiluju tƒõ. ‚ù§Ô∏è\n\n\n(Automaticky generovan√Ω email)""")

    # P≈ôihla≈°ovac√≠ √∫daje
    uzivatel = GOOGLE_U
    heslo = GOOGLE_P

    # Odesl√°n√≠ e-mailu

    try:
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login(uzivatel, heslo)
            smtp.send_message(msg)
        print_and_log(f"‚úÖ {JMENO_PRITELKYNE} informov√°na.")
    except Exception as e:
        print_and_log(f"‚ùå Nepoda≈ôilo se informovat p≈ô√≠telkyni: {e}")

if __name__ == "__main__":
    # Funkce spou≈°t√≠ registraci st√°le dokola, dokud registrace nebude √∫spƒõ≈°n√°
    POKUS_TIME = datetime.now().replace(microsecond=0).strftime("%Y-%m-%d_%H-%M-%S")
    cislo_pokusu = 1
    while cislo_pokusu <= LIMIT:
        print_and_log(f"üîÅ Pokus o registraci ƒç. {cislo_pokusu} z {LIMIT}")
        if registrace():
            break
        print_and_log("‚ùå Pokus o registraci selhal. Zkou≈°√≠m znovu...")
        cislo_pokusu += 1
    if cislo_pokusu > LIMIT:
        print_and_log(f"‚ùå Registrace selhala i po {LIMIT} pokusech. Skript konƒç√≠.")